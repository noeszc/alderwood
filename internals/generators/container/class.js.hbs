/**
 *
 * {{properCase name }}
 *
 */

import React from 'react';
// import PropTypes from 'prop-types';
import { connect } from 'react-redux';
import { compose } from 'redux';

{{#if wantSaga}}
import injectSaga from 'client/utils/injectSaga';
{{/if}}
{{#if wantActionsAndReducer}}
import injectReducer from 'client/utils/injectReducer';
// import {} from './selectors';
import reducer from './reducer';
{{/if}}
{{#if wantSaga}}
import saga from './saga';
{{/if}}

/* eslint-disable react/prefer-stateless-function */
export class {{ properCase name }} extends {{{ type }}} {
  static propTypes = {};
  
  render() {
    return (
      <div>
        <h1>{{properCase name}}</h1>
      </div>
    );
  }
}


{{#if wantActionsAndReducer}}
const mapStateToProps = state => ({})
{{/if}}

const mapDispatchToProps = dispatch => ({})

{{#if wantActionsAndReducer}}
const withConnect = connect(
  mapStateToProps,
  mapDispatchToProps
);

const withReducer = injectReducer({ key: '{{ camelCase name }}', reducer });
{{else}}
const withConnect = connect(null, mapDispatchToProps);
{{/if}}
{{#if wantSaga}}
const withSaga = injectSaga({ key: '{{ camelCase name }}', saga });
{{/if}}

export default compose(
{{#if wantActionsAndReducer}}
  withReducer,
{{/if}}
{{#if wantSaga}}
  withSaga,
{{/if}}
  withConnect
)({{ properCase name }});
